// OCP
// 확장에는 열려있고 변경에는 닫혀있어야함.

// 이 컴포넌트는 OCP를 준수했다고 말하기 애매하다.
// 리엑트의 CBD( 컴포넌트 개발) 개발방식이 붙일 때 유리( 컴포넌트만 잘 붙이면 하나의 화면 완성)
//  -> 컴포넌트 자체가 재사용성, 확장성을 고려하지 않으면 안되는 구조

// 단, 이 코드에서는 아쉬운점이 있다.
// 컴포넌트의 취급 객체 자체가 한정되어 있다라는 아쉬움이 있다.
//  -> post컴포넌트만 취급을 하여 card를 업데이트하는 경우이기 때문에
//     다른 비슷한 카드구성 화면에서는 활용할 수 없다는 아쉬움이 있다.
// const PostCardList = ({ posts }) => {

//     return (
//         <Wrapper>
//             {posts.map((post) => (
//                 <PostCard key={post.id} />
//             ))}
//         </Wrapper>
//     );
// };

// 다양한 종류의 카드를 활용할 수 있도록 Card 자체를 컴포넌트로 만든 후
// 해당 내용을 받아와 해당 화면에 맞도록 처리할 수 있다.( 공통된 작업은 컴포넌트화)
const CardList = ({ datas, Card }) => {

    return (
        <Wrapper>
            {datas.map((post) => (
                <PostCard key={post.id} />
            ))}
        </Wrapper>
    );
};

// 웹서버와 WAS의 차이점
// 웹서버는 정적인 요청을 처리하고,
// WAS는 동적인 요청을 처리하도록 역할을 분리해서 성능을 최적화함.
// 예를 들어, Nginx(웹서버) + Tomcat(WAS) 조합을 사용하는 경우가 많아.